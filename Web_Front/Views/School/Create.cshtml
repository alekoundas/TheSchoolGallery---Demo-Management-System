@model Web_DomainClasses.Entities.School.School

@{
    ViewBag.Title = "Create";
}


<div class="limiter">
    <div class="container-login100">
        <div class="container">
            <br />
            <br />
            <br />
            <div class="row">
                <div class="col-md-8 mx-auto">
                    <div class="wrap-login100">

                        <span class="login100-form-title p-b-33">
                            Create New School
                        </span>

                        @using (Html.BeginForm())
                        {

                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <div class="wrap-input100">
                                @Html.EditorFor(model => model.Image, new { htmlAttributes = new { @class = "input100", placeholder = "Image" } })
                                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })

                                <span class="focus-input100-1"></span>
                                <span class="focus-input100-2"></span>
                            </div>

                            <div class="wrap-input100">
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "input100", placeholder = "Name" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })

                                <span class="focus-input100-1"></span>
                                <span class="focus-input100-2"></span>
                            </div>

                            <div class="wrap-input100">
                                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "input100", placeholder = "City" } })
                                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })

                                <span class="focus-input100-1"></span>
                                <span class="focus-input100-2"></span>
                            </div>

                            <div class="wrap-input100">
                                @Html.EditorFor(model => model.Adress, new { htmlAttributes = new { @class = "input100", placeholder = "Address" } })
                                @Html.ValidationMessageFor(model => model.Adress, "", new { @class = "text-danger" })

                                <span class="focus-input100-1"></span>
                                <span class="focus-input100-2"></span>
                            </div>

                            <div class="wrap-input100">
                                @Html.EditorFor(model => model.Tel, new { htmlAttributes = new { @class = "input100", placeholder = "Telephone" } })
                                @Html.ValidationMessageFor(model => model.Tel, "", new { @class = "text-danger" })

                                <span class="focus-input100-1"></span>
                                <span class="focus-input100-2"></span>
                            </div>



                            @* <Google Maps Start Here>  *@

                            <div id="gmap" style="width:100%;height:400px;"></div> @*The Map Will Be Displayed*@
                            <input name='start' id='origin-input' class='form-control' type='text' placeholder='Ορίστε Τοποθεσια'> @*Input With AutoComplete From GoogleAPI*@
                            <input type="text" name="PlaceId" id="PlaceId" value="" hidden /> @*this Will Hold The Value Of Place So Controller Can Save it To DB*@

                            @* </Google Maps Start Here> *@


                            <div class="container-login100-form-btn m-t-20">
                                <input class="login100-form-btn" type="submit" value="Create" />
                            </div>
                            <br />
                            <hr />
                        }


                    </div>
                </div>

                <div class="col-md-3 mx-auto">
                    <div class="sideImage" id="p_container">
                        <img class="stackImages" src="~/images/parallax/Portrait_base_01.png">
                        <img style="bottom:0px" class="stackImages p_child" id="slideone" src="~/images/parallax/Portrait_body_01.png">
                        <img style="bottom:0px" class="stackImages P_child" id="slidetwo" src="~/images/parallax/Portrait_hand_01.png">
                    </div>
                </div>


            </div>
        </div>

        <section id="socialLoginForm">
            <h3 class="text-center" style="color:white">Return</h3>
            <hr />
            <div class="container-login100-form-btn m-t-20">
                <a href="@Url.Action("Index", "School")"><img id="iconBtn" src="~/images/UIcons/schools_off.png" /> back to schools </a>

                @*@Html.ActionLink("Back to List", "Index")*@
            </div>
        </section>

    </div>
</div>

@*                            BETA GMAPS API                                        *@

<script type="text/javascript">


    function initMap() {
        map = new google.maps.Map(document.getElementById('gmap'), { zoom: 8, center: { lat: 37.983810, lng: 23.727539 } });
        new AutocompleteDirectionsHandler(map);
    }
    function AutocompleteDirectionsHandler(map) {
        this.map = map;
        this.originPlaceId = null;
        this.destinationPlaceId = null;
        this.travelMode = 'DRIVING';//αλλαγη τροπου μεταφορας σε αυτοκινητο
        var originInput = document.getElementById('origin-input');
        var destinationInput = document.getElementById('destination-input');
        this.directionsService = new google.maps.DirectionsService;
        this.directionsDisplay = new google.maps.DirectionsRenderer;
        this.directionsDisplay.setMap(map);
        var originAutocomplete = new google.maps.places.Autocomplete(originInput, { placeIdOnly: true });
        var destinationAutocomplete = new google.maps.places.Autocomplete(destinationInput, { placeIdOnly: true });


        this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
        this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

    }
    AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function (autocomplete, mode) {
        var me = this;
        autocomplete.bindTo('bounds', this.map);
        autocomplete.addListener('place_changed', function () {

            var place = autocomplete.getPlace();//returns Choosen Place
            me.originPlaceId = place.place_id;//το place_id που αντιστοιχει στην επιλεγμεντη τοποθεσια
            me.route();
        });
    };
    AutocompleteDirectionsHandler.prototype.route = function () {
        var me = this;
        this.directionsService.route(
            {
                origin: { 'placeId': this.originPlaceId },
                destination: { 'placeId': this.originPlaceId },
                travelMode: this.travelMode
            }, function (response, status) {


                //First
                me.directionsDisplay.setDirections(response);
                $('#PlaceId').attr("value",response.geocoded_waypoints[0].place_id);
                //bounds = new google.maps.LatLngBounds();

                //var service = new google.maps.places.PlacesService(map);
                //service.getDetails({
                //    placeId: response.geocoded_waypoints[0].place_id
                //}, function (result, status) {
                //    var marker = new google.maps.Marker({
                //        map: map,
                //        place: {
                //            placeId: result.place_id,
                //            location: result.geometry.location
                //        }
                //    });

                //    //loc = new google.maps.LatLng(marker.position.lat(), marker.position.lng());
                //    //bounds.extend(loc);

                //});
                //map.fitBounds(bounds);
                //map.panToBounds(bounds);
                //console.log(response.geocoded_waypoints[0].place_id);
                //console.log(me.directionsDisplay);
            });
    };
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCucoJw77Lpe1D97ZE4Nin_yakyZ_npPgs&libraries=places&callback=initMap" async defer></script>
